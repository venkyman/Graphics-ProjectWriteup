{"name":"Computer Graphics - Iterated Function Systems","tagline":"Assignment 5 Report","body":"## Author\r\nVenkatesh Manickavasagam (vmanicka)\r\n\r\n## Description\r\nI worked on designing and implementing a framework for rendering **fractal images based on Iterated Function Systems** (Option G). More specifically, I modified the rasterizer from assignment 1 to build a generic tool that accepts parameters (affine transformations and transformation probabilities) to render fractal images. The following section contains more details about what I implemented.\r\n\r\n## Features\r\n1. The tool I created (by modifying the rasterizer from assignment 1) renders fractal images using the **chaos game** approach by accepting transformation parameters and probabilities. The fractal image is rendered based on parameters passed via an svg file. This makes creating new IFS rules to render new fractal images simple. The user just has to add a new **fractal** xml tag and supply the transformation parameters and probabilities. The following xml block in an svg file defines the Sierpinski triangle.\r\n```xml\r\n<fractal iterations=\"1000000\" fill=\"#0B0B61\">\r\n  <!-- A Sierpinski triangle with coordinates (200, 800), (800, 800) and (500, 280.38) and seed point (500, 626.79) -->\r\n  <seed x=\"500\" y=\"626.79\"/>\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"100\" f=\"400\" />\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"400\" f=\"400\" />\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"250\" f=\"140.19\" />\r\n</fractal>\r\n```\r\n2. I created an svg file for the **Sierpinski triangle** and one for the **Barnsley Fern**. It contains the necessary parameters required by the tool to render the respective fractal images. The rendering outputs can be found in the following sections.\r\n3. I implemented Irradiance Caching as advised in the handout by interpolating the relative energies for each transformed point upon their four neighboring pixels. The rendered outputs in the following sections use Irradiance Caching. For instance, in the Barnsley Fern fractal image, the tips of the leaves are brighter than the portions near the stem. This is because the tips of the leaves are very dense.\r\n4. I also adapted **supersampling** from assignment 1 to prevent spatial aliasing. Without supersampling (as you can see in the outputs below), the stem of the Barnsley Fern looked rugged due to aliasing. Supersampling got rid of the aliasing . However, it also made the stem narrower.\r\n5. I also colored the fractal images. The color is supplied by the user as a parameter in the svg file.\r\n6. I implemented a **distance function** using a BFS approach that captured the Manhattan distance between each background sample from the closest foreground sample. This was used to mix the supplied foreground color and white so that samples close to the foreground are closer to white and those that are farther away are closer to the foreground color.\r\n6. I also formulated my own IFS parameters to generate two new fractal images. The math/intuition behind them and the outputs can be found in the following sections.\r\n\r\n## Building and Running\r\nThe tool can be built and run similar to assignment 1. The same shortcuts are supported. Most importantly, the '+' key can be used to increase the sample rate and the 1-4 keys can be used to navigate between the four svg files.\r\n\r\nTo build the code, run the following commands.\r\n```code\r\ncd /afs/cs/academic/class/15462-f15-users/vmanicka/asst5/\r\nmkdir build && cd build && cmake ../src && make && make install\r\n```\r\nTo run the tool, use the following command.\r\n```code\r\n./drawsvg ../svg\r\n```\r\nTo load a specific svg file, use the following command.\r\n```code\r\n./drawsvg ../svg/tower.svg\r\n```\r\n\r\n## Outputs\r\n\r\n### Sierpinski Triangle\r\n#### Parameters\r\n```xml\r\n<fractal iterations=\"1000000\" fill=\"#0B0B61\">\r\n  <!-- A Sierpinski triangle with coordinates (200, 800), (800, 800) and (500, 280.38) and seed point (500, 626.79) -->\r\n  <seed x=\"500\" y=\"626.79\"/>\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"100\" f=\"400\" />\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"400\" f=\"400\" />\r\n  <transformation prob=\"0.3333\" a=\"0.5\" b=\"0\" c=\"0\" d=\"0.5\" e=\"250\" f=\"140.19\" />\r\n</fractal>\r\n```\r\n#### Without Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Sierpinski-WithoutSupersampling.png)\r\n#### With 16x Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Sierpinski-WithSupersampling.png)\r\n\r\n### Barnsley Fern\r\n#### Parameters\r\n```xml\r\n<fractal iterations=\"1000000\" fill =\"#00FF00\">\r\n  <!-- A Barnsley fern -->\r\n  <!--\r\n  The transformations are of the form\r\n  [1  0    0  * [100   0 500  * f * [0.01 0    -5  * [1  0    0\r\n   0 -1 1000       0 100   0         0    0.01  0     0 -1 1000\r\n   0  0    1]      0   0   1]        0    0     1]    0  0    1]\r\n\r\n  where f can be one of\r\n  [0 0    0   or  [ 0.85 0.04 0      or  [0.20 -0.26 0      or  [-0.15 0.28 0\r\n   0 0.16 0        -0.04 0.85 1.60        0.23  0.22 1.60         0.26 0.24 0.44\r\n   0 0    1]        0    0    1   ]       0     0    1   ]        0    0    1   ]\r\n  -->\r\n  <seed x=\"500\" y=\"1000\"/>\r\n  <transformation prob=\"0.01\" a=\"0\" b=\"0\" c=\"0\" d=\"0.16\" e=\"500\" f=\"840\" />\r\n  <transformation prob=\"0.85\" a=\"0.85\" b=\"-0.04\" c=\"0.04\" d=\"0.85\" e=\"115\" f=\"-30\" />\r\n  <transformation prob=\"0.07\" a=\"0.20\" b=\"0.26\" c=\"-0.23\" d=\"0.22\" e=\"140\" f=\"735\" />\r\n  <transformation prob=\"0.07\" a=\"-0.15\" b=\"-0.28\" c=\"-0.26\" d=\"0.24\" e=\"855\" f=\"846\" />\r\n</fractal>\r\n```\r\n#### Without Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Barnsley-WithoutSupersampling.png)\r\n#### With 16x Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Barnsley-WithSupersampling.png)\r\n\r\n### Custom Fractal 1 - Repulse\r\n#### Math/Intuition\r\nIn the Sierpinksi triangle, at each plotted sample P, we moved to the midpoint of the line joining P and a randomly selected vertex V to get the next point. In other words, the new point was computed as (P + V) / 2. Let us say we want to move outside the vertex by the same distance, instead of moving to the midpoint. That is, we move P to V + (V - ((P + V) / 2)) to get the new point. In short, the new P can be computed as 3V/2 - P/2. In this case we would expect the three smaller triangles inside a large triangle to be outside the vertices. This is true for every smaller triangle inside the other smaller triangles as well. As you can see from the outputs, my intuition proved right! Hurray :)\r\n#### Parameters\r\n```xml\r\n<fractal iterations=\"1000000\" fill=\"#8A0829\">\r\n  <!-- A variation of Sierpinski triangle with coordinates (300, 700), (700, 700) and (500, 346.41) and seed point (500, 582.14).\r\n       Instead of moving half way towards a selected vertex, we move the same distance outside the vertex.-->\r\n  <seed x=\"500\" y=\"582.14\"/>\r\n  <transformation prob=\"0.3333\" a=\"-0.5\" b=\"0\" c=\"0\" d=\"-0.5\" e=\"450\" f=\"1050\" />\r\n  <transformation prob=\"0.3333\" a=\"-0.5\" b=\"0\" c=\"0\" d=\"-0.5\" e=\"1050\" f=\"1050\" />\r\n  <transformation prob=\"0.3333\" a=\"-0.5\" b=\"0\" c=\"0\" d=\"-0.5\" e=\"750\" f=\"519.615\" />\r\n</fractal>\r\n```\r\n#### Without Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Repulse-WithoutSupersampling.png)\r\n#### With 16x Supersampling\r\n![](https://raw.githubusercontent.com/venkyman/graphics-projectwriteup/gh-pages/images/Repulse-WithSupersampling.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}